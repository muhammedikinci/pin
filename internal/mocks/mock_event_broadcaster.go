// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/event_broadcaster.go
//
// Generated by this command:
//
//	mockgen -source internal/interfaces/event_broadcaster.go -destination internal/mocks/mock_event_broadcaster.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	interfaces "github.com/muhammedikinci/pin/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockEventBroadcaster is a mock of EventBroadcaster interface.
type MockEventBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockEventBroadcasterMockRecorder
	isgomock struct{}
}

// MockEventBroadcasterMockRecorder is the mock recorder for MockEventBroadcaster.
type MockEventBroadcasterMockRecorder struct {
	mock *MockEventBroadcaster
}

// NewMockEventBroadcaster creates a new mock instance.
func NewMockEventBroadcaster(ctrl *gomock.Controller) *MockEventBroadcaster {
	mock := &MockEventBroadcaster{ctrl: ctrl}
	mock.recorder = &MockEventBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBroadcaster) EXPECT() *MockEventBroadcasterMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockEventBroadcaster) AddClient(clientChan chan interfaces.Event) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", clientChan)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddClient indicates an expected call of AddClient.
func (mr *MockEventBroadcasterMockRecorder) AddClient(clientChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockEventBroadcaster)(nil).AddClient), clientChan)
}

// Broadcast mocks base method.
func (m *MockEventBroadcaster) Broadcast(event interfaces.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", event)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockEventBroadcasterMockRecorder) Broadcast(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockEventBroadcaster)(nil).Broadcast), event)
}

// Close mocks base method.
func (m *MockEventBroadcaster) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventBroadcasterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventBroadcaster)(nil).Close))
}

// RemoveClient mocks base method.
func (m *MockEventBroadcaster) RemoveClient(clientID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveClient", clientID)
}

// RemoveClient indicates an expected call of RemoveClient.
func (mr *MockEventBroadcasterMockRecorder) RemoveClient(clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClient", reflect.TypeOf((*MockEventBroadcaster)(nil).RemoveClient), clientID)
}
